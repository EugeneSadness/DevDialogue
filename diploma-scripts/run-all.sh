#!/bin/bash

# –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ DevOps-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
# –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∏–∑ diploma/screenshots.md

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
print_header() {
    echo -e "\n${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}\n"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å–ø–µ—Ö–∞
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏
print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  all           - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  docker        - –°–æ–∑–¥–∞—Ç—å Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "  kubernetes    - –°–æ–∑–¥–∞—Ç—å Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã"
    echo "  cicd          - –°–æ–∑–¥–∞—Ç—å GitHub Actions workflows"
    echo "  logging       - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å ELK Stack"
    echo "  security      - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Vault"
    echo "  database      - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å PostgreSQL —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—é"
    echo "  monitoring    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Grafana + Prometheus)"
    echo "  clean         - –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
    echo "  status        - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  help          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 all        # –°–æ–∑–¥–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
    echo "  $0 docker     # –¢–æ–ª—å–∫–æ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "  $0 status     # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    local missing_deps=()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if ! command -v docker &> /dev/null; then
        missing_deps+=("docker")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        missing_deps+=("docker-compose")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º kubectl (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if ! command -v kubectl &> /dev/null; then
        print_warning "kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω—É–∂–µ–Ω –¥–ª—è Kubernetes)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º git
    if ! command -v git &> /dev/null; then
        missing_deps+=("git")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
setup_docker() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker"
    
    if [ -x "setup-docker/create-dockerfile.sh" ]; then
        ./setup-docker/create-dockerfile.sh
        print_success "Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
    else
        print_error "–°–∫—Ä–∏–ø—Ç setup-docker/create-dockerfile.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
setup_kubernetes() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kubernetes"
    
    if [ -x "setup-kubernetes/create-hpa.sh" ]; then
        ./setup-kubernetes/create-hpa.sh
        print_success "Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã"
    else
        print_error "–°–∫—Ä–∏–ø—Ç setup-kubernetes/create-hpa.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CI/CD workflows
setup_cicd() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD"
    
    if [ -x "setup-cicd/create-github-actions.sh" ]; then
        ./setup-cicd/create-github-actions.sh
        print_success "GitHub Actions workflows —Å–æ–∑–¥–∞–Ω—ã"
    else
        print_error "–°–∫—Ä–∏–ø—Ç setup-cicd/create-github-actions.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ELK Stack"
    
    if [ -x "setup-logging/create-elk-stack.sh" ]; then
        ./setup-logging/create-elk-stack.sh
        print_success "ELK Stack –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
    else
        print_error "–°–∫—Ä–∏–ø—Ç setup-logging/create-elk-stack.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
setup_security() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vault"
    
    if [ -x "setup-security/create-vault-config.sh" ]; then
        ./setup-security/create-vault-config.sh
        print_success "Vault –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
    else
        print_error "–°–∫—Ä–∏–ø—Ç setup-security/create-vault-config.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
setup_database() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏"
    
    if [ -x "setup-database/create-postgres-config.sh" ]; then
        ./setup-database/create-postgres-config.sh
        print_success "PostgreSQL —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    else
        print_error "–°–∫—Ä–∏–ø—Ç setup-database/create-postgres-config.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
start_monitoring() {
    print_header "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    
    if [ -x "setup-docker/run-monitoring.sh" ]; then
        ./setup-docker/run-monitoring.sh
        print_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω"
    else
        print_error "–°–∫—Ä–∏–ø—Ç setup-docker/run-monitoring.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
clean_all() {
    print_header "–û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã? (y/N): " CONFIRM
    
    if [[ "$CONFIRM" != "y" && "$CONFIRM" != "Y" ]]; then
        echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 0
    fi
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker stop $(docker ps -q) 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    rm -rf messenger-service k8s-manifests .github elk-stack vault-setup postgres-replication monitoring-data
    
    print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    print_header "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    echo "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    
    echo ""
    echo "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
    ls -la | grep "^d" | grep -E "(messenger-service|k8s-manifests|elk-stack|vault-setup|postgres-replication)" || echo "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
    
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "üîó Grafana:        http://localhost:3000"
    echo "üîó Prometheus:     http://localhost:9090"
    echo "üîó Kibana:         http://localhost:5601"
    echo "üîó Vault:          http://localhost:8200"
    echo "üîó pgAdmin:        http://localhost:8080"
    echo "üîó Messenger API:  http://localhost:3000"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
run_all() {
    print_header "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ DevOps-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"
    
    check_dependencies
    
    setup_docker
    setup_kubernetes
    setup_cicd
    setup_logging
    setup_security
    setup_database
    
    print_header "–°–≤–æ–¥–∫–∞"
    print_success "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!"
    echo ""
    echo "üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
    echo "   messenger-service/     - Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "   k8s-manifests/         - Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã"
    echo "   .github/workflows/     - GitHub Actions workflows"
    echo "   elk-stack/             - ELK Stack –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "   vault-setup/           - Vault –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "   postgres-replication/  - PostgreSQL —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è"
    echo ""
    echo "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: $0 monitoring"
    echo "   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ELK Stack: cd elk-stack && ./start-elk.sh"
    echo "   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Vault: cd vault-setup && ./start-vault.sh"
    echo "   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL: cd postgres-replication && ./start-postgres-cluster.sh"
    echo "   5. –°–æ–±–µ—Ä–∏—Ç–µ Docker –æ–±—Ä–∞–∑: cd messenger-service && docker build -t messenger-service ."
    echo ""
    echo "üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: $0 status"
}

# –î–µ–ª–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
make_executable() {
    find . -name "*.sh" -type f -exec chmod +x {} \;
    print_success "–í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–¥–µ–ª–∞–Ω—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
    cd "$(dirname "$0")"
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
    make_executable
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    case "${1:-all}" in
        all)
            run_all
            ;;
        docker)
            setup_docker
            ;;
        kubernetes)
            setup_kubernetes
            ;;
        cicd)
            setup_cicd
            ;;
        logging)
            setup_logging
            ;;
        security)
            setup_security
            ;;
        database)
            setup_database
            ;;
        monitoring)
            start_monitoring
            ;;
        clean)
            clean_all
            ;;
        status)
            check_status
            ;;
        help|*)
            show_help
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main "$@"
