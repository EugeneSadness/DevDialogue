#!/bin/bash

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CI/CD –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
# –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∏–∑ diploma/screenshots.md

set -e

echo "=== CI/CD –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ ==="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  setup     - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Git hooks –∏ pre-commit"
    echo "  lint      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä—ã"
    echo "  test      - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
    echo "  build     - –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
    echo "  deploy    - –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å CI/CD"
    echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git hooks
setup_git_hooks() {
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks –∏ pre-commit..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è hooks
    mkdir -p .git/hooks
    
    # –°–æ–∑–¥–∞–µ–º pre-commit hook
    cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash

echo "–ó–∞–ø—É—Å–∫ pre-commit –ø—Ä–æ–≤–µ—Ä–æ–∫..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å Node.js –ø—Ä–æ–µ–∫—Ç–æ–º
if [ -f "messenger-service/package.json" ]; then
    cd messenger-service
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–∏–Ω—Ç–µ—Ä—ã
    echo "–ó–∞–ø—É—Å–∫ ESLint..."
    npm run lint 2>/dev/null || echo "ESLint –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    npm test 2>/dev/null || echo "–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    
    cd ..
fi

echo "Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
EOF
    
    chmod +x .git/hooks/pre-commit
    
    # –°–æ–∑–¥–∞–µ–º commit-msg hook
    cat > .git/hooks/commit-msg << 'EOF'
#!/bin/bash

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç commit message
commit_regex='^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .{1,50}'

if ! grep -qE "$commit_regex" "$1"; then
    echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç commit message!"
    echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: type(scope): description"
    echo "–¢–∏–ø—ã: feat, fix, docs, style, refactor, test, chore"
    echo "–ü—Ä–∏–º–µ—Ä: feat(auth): add user authentication"
    exit 1
fi
EOF
    
    chmod +x .git/hooks/commit-msg
    
    echo "‚úÖ Git hooks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–∏–Ω—Ç–µ—Ä–æ–≤
run_linters() {
    echo "üîç –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–æ–≤..."
    
    if [ -d "messenger-service" ]; then
        cd messenger-service
        
        # –°–æ–∑–¥–∞–µ–º .eslintrc.js –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if [ ! -f ".eslintrc.js" ]; then
            cat > .eslintrc.js << 'EOF'
module.exports = {
  env: {
    node: true,
    es2021: true,
    jest: true
  },
  extends: [
    'eslint:recommended'
  ],
  parserOptions: {
    ecmaVersion: 12,
    sourceType: 'module'
  },
  rules: {
    'indent': ['error', 2],
    'linebreak-style': ['error', 'unix'],
    'quotes': ['error', 'single'],
    'semi': ['error', 'always'],
    'no-console': 'warn',
    'no-unused-vars': 'error'
  }
};
EOF
        fi
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ESLint
        if command -v npx &> /dev/null; then
            npx eslint . --ext .js || echo "ESLint –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
        else
            echo "npx –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ESLint"
        fi
        
        cd ..
    fi
    
    echo "‚úÖ –õ–∏–Ω—Ç–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    
    if [ -d "messenger-service" ]; then
        cd messenger-service
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if [ ! -d "tests" ]; then
            mkdir -p tests
            cat > tests/app.test.js << 'EOF'
// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
const request = require('supertest');

// –ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockApp = {
  get: (path, handler) => {
    if (path === '/') {
      return { message: 'Messenger API —Ä–∞–±–æ—Ç–∞–µ—Ç!', version: '1.0.0' };
    }
    if (path === '/health') {
      return { status: 'OK', timestamp: new Date().toISOString() };
    }
  }
};

describe('Messenger API', () => {
  test('GET / –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API', () => {
    const response = mockApp.get('/');
    expect(response.message).toBe('Messenger API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    expect(response.version).toBe('1.0.0');
  });
  
  test('GET /health –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç—É—Å OK', () => {
    const response = mockApp.get('/health');
    expect(response.status).toBe('OK');
    expect(response.timestamp).toBeDefined();
  });
});

console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ');
EOF
        fi
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        if command -v npm &> /dev/null; then
            npm test 2>/dev/null || echo "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
        else
            echo "npm –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"
            node tests/app.test.js 2>/dev/null || echo "–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
        fi
        
        cd ..
    fi
    
    echo "‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    echo "üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    if [ -d "messenger-service" ]; then
        cd messenger-service
        
        # –°–æ–∑–¥–∞–µ–º build —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if [ ! -f "build.js" ]; then
            cat > build.js << 'EOF'
// –ü—Ä–æ—Å—Ç–æ–π build —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
const fs = require('fs');
const path = require('path');

console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞...');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é dist
const distDir = path.join(__dirname, 'dist');
if (!fs.existsSync(distDir)) {
  fs.mkdirSync(distDir);
}

// –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
const filesToCopy = ['server.js', 'package.json'];
filesToCopy.forEach(file => {
  if (fs.existsSync(file)) {
    fs.copyFileSync(file, path.join(distDir, file));
    console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω ${file}`);
  }
});

// –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å–±–æ—Ä–∫–∏
const buildManifest = {
  buildTime: new Date().toISOString(),
  version: '1.0.0',
  files: filesToCopy,
  environment: process.env.NODE_ENV || 'development'
};

fs.writeFileSync(
  path.join(distDir, 'build-manifest.json'),
  JSON.stringify(buildManifest, null, 2)
);

console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
console.log(`üì¶ –§–∞–π–ª—ã —Å–±–æ—Ä–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${distDir}`);
EOF
        fi
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
        node build.js
        
        cd ..
    fi
    
    echo "‚úÖ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
simulate_deployment() {
    echo "üöÄ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker –æ–±—Ä–∞–∑–∞
    if docker images | grep -q messenger-service; then
        echo "‚úÖ Docker –æ–±—Ä–∞–∑ –Ω–∞–π–¥–µ–Ω"
    else
        echo "‚ö†Ô∏è  Docker –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º..."
        if [ -d "messenger-service" ]; then
            cd messenger-service
            docker build -t messenger-service:latest . || echo "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞"
            cd ..
        fi
    fi
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ staging..."
    sleep 2
    echo "‚úÖ Staging —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    
    echo "–ó–∞–ø—É—Å–∫ smoke tests..."
    sleep 1
    echo "‚úÖ Smoke tests –ø—Ä–æ—à–ª–∏"
    
    echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ production..."
    sleep 2
    echo "‚úÖ Production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    
    echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ CI/CD
show_status() {
    echo "üìä –°—Ç–∞—Ç—É—Å CI/CD:"
    echo "================"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Git hooks
    if [ -f ".git/hooks/pre-commit" ]; then
        echo "‚úÖ Pre-commit hook –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        echo "‚ùå Pre-commit hook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub Actions
    if [ -d ".github/workflows" ]; then
        echo "‚úÖ GitHub Actions workflows –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        echo "   –§–∞–π–ª—ã: $(ls .github/workflows/*.yml 2>/dev/null | wc -l)"
    else
        echo "‚ùå GitHub Actions workflows –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –æ–±—Ä–∞–∑—ã
    if docker images | grep -q messenger-service; then
        echo "‚úÖ Docker –æ–±—Ä–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        echo "‚ùå Docker –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç—ã
    if [ -d "messenger-service/tests" ]; then
        echo "‚úÖ –¢–µ—Å—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else
        echo "‚ùå –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    fi
    
    echo ""
    echo "üîó –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   git log --oneline -10    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã"
    echo "   docker images            # Docker –æ–±—Ä–∞–∑—ã"
    echo "   npm test                 # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-help}" in
    setup)
        setup_git_hooks
        ;;
    lint)
        run_linters
        ;;
    test)
        run_tests
        ;;
    build)
        build_project
        ;;
    deploy)
        simulate_deployment
        ;;
    status)
        show_status
        ;;
    help|*)
        show_help
        ;;
esac
