#!/bin/bash

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ELK Stack
# –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –∏–∑ diploma/screenshots.md

set -e

echo "=== –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º ELK Stack ==="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å ELK Stack"
    echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ELK Stack"
    echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ELK Stack"
    echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  test      - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏"
    echo "  clean     - –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –∏ –¥–∞–Ω–Ω—ã–µ"
    echo "  backup    - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ª–æ–≥–æ–≤"
    echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ELK Stack
start_elk() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ ELK Stack..."
    
    if [ ! -f "elk-stack/docker-compose.yml" ]; then
        echo "‚ùå ELK Stack –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ create-elk-stack.sh"
        exit 1
    fi
    
    cd elk-stack
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º vm.max_map_count –¥–ª—è Elasticsearch
    echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ vm.max_map_count –¥–ª—è Elasticsearch..."
    sudo sysctl -w vm.max_map_count=262144 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å vm.max_map_count (—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ sudo)"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    docker-compose up -d
    
    echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    docker-compose ps
    
    cd ..
    echo "‚úÖ ELK Stack –∑–∞–ø—É—â–µ–Ω!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ELK Stack
stop_elk() {
    echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ELK Stack..."
    
    if [ -f "elk-stack/docker-compose.yml" ]; then
        cd elk-stack
        docker-compose down
        cd ..
        echo "‚úÖ ELK Stack –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ùå ELK Stack –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ ELK Stack
restart_elk() {
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ELK Stack..."
    stop_elk
    sleep 5
    start_elk
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
show_logs() {
    echo "üìã –õ–æ–≥–∏ ELK Stack —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo "=========================="
    
    if [ -f "elk-stack/docker-compose.yml" ]; then
        cd elk-stack
        
        echo "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:"
        echo "1) Elasticsearch"
        echo "2) Logstash"
        echo "3) Kibana"
        echo "4) Filebeat"
        echo "5) –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        
        read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): " choice
        
        case $choice in
            1)
                docker-compose logs -f elasticsearch
                ;;
            2)
                docker-compose logs -f logstash
                ;;
            3)
                docker-compose logs -f kibana
                ;;
            4)
                docker-compose logs -f filebeat
                ;;
            5)
                docker-compose logs -f
                ;;
            *)
                echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
                ;;
        esac
        
        cd ..
    else
        echo "‚ùå ELK Stack –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    echo "üìä –°—Ç–∞—Ç—É—Å ELK Stack:"
    echo "==================="
    
    if [ -f "elk-stack/docker-compose.yml" ]; then
        cd elk-stack
        docker-compose ps
        cd ..
        
        echo ""
        echo "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Elasticsearch
        if curl -s http://localhost:9200/_cluster/health &>/dev/null; then
            echo "‚úÖ Elasticsearch: http://localhost:9200"
        else
            echo "‚ùå Elasticsearch: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Kibana
        if curl -s http://localhost:5601/api/status &>/dev/null; then
            echo "‚úÖ Kibana: http://localhost:5601"
        else
            echo "‚ùå Kibana: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Logstash
        if curl -s http://localhost:9600 &>/dev/null; then
            echo "‚úÖ Logstash: http://localhost:9600"
        else
            echo "‚ùå Logstash: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
        
    else
        echo "‚ùå ELK Stack –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤
send_test_logs() {
    echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Logstash –¥–æ—Å—Ç—É–ø–µ–Ω
    if ! curl -s http://localhost:5000 &>/dev/null; then
        echo "‚ùå Logstash –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000"
        exit 1
    fi
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–≥–æ–≤
    echo "–û—Ç–ø—Ä–∞–≤–∫–∞ INFO –ª–æ–≥–æ–≤..."
    for i in {1..5}; do
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"INFO\",\"service\":\"messenger-api\",\"message\":\"User login successful\",\"user_id\":\"user_$i\"}" | nc localhost 5000
        sleep 1
    done
    
    echo "–û—Ç–ø—Ä–∞–≤–∫–∞ WARNING –ª–æ–≥–æ–≤..."
    for i in {1..3}; do
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"WARN\",\"service\":\"messenger-api\",\"message\":\"High memory usage detected\",\"memory_usage\":\"85%\"}" | nc localhost 5000
        sleep 1
    done
    
    echo "–û—Ç–ø—Ä–∞–≤–∫–∞ ERROR –ª–æ–≥–æ–≤..."
    for i in {1..2}; do
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"ERROR\",\"service\":\"messenger-api\",\"message\":\"Database connection failed\",\"error\":\"Connection timeout\"}" | nc localhost 5000
        sleep 1
    done
    
    echo "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤"
    echo "üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –≤ Kibana: http://localhost:5601"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
clean_data() {
    echo "üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ELK Stack..."
    
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ –∏ –¥–∞–Ω–Ω—ã–µ? (y/N): " CONFIRM
    
    if [[ "$CONFIRM" != "y" && "$CONFIRM" != "Y" ]]; then
        echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 0
    fi
    
    if [ -f "elk-stack/docker-compose.yml" ]; then
        cd elk-stack
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        docker-compose down
        
        # –£–¥–∞–ª—è–µ–º volumes
        docker-compose down -v
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Elasticsearch
        curl -X DELETE "localhost:9200/*" 2>/dev/null || echo "Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        cd ..
        echo "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
    else
        echo "‚ùå ELK Stack –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
backup_logs() {
    echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ª–æ–≥–æ–≤..."
    
    BACKUP_DIR="elk-backup-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã Elasticsearch
    if curl -s http://localhost:9200/_cat/indices &>/dev/null; then
        echo "–≠–∫—Å–ø–æ—Ä—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ Elasticsearch..."
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
        INDICES=$(curl -s "http://localhost:9200/_cat/indices?h=index" | grep -v "^\." | head -10)
        
        for index in $INDICES; do
            echo "–≠–∫—Å–ø–æ—Ä—Ç –∏–Ω–¥–µ–∫—Å–∞: $index"
            curl -s "http://localhost:9200/$index/_search?size=1000" > "$BACKUP_DIR/$index.json"
        done
        
        echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $BACKUP_DIR"
    else
        echo "‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Kibana –¥–∞—à–±–æ—Ä–¥–æ–≤
setup_kibana_dashboards() {
    echo "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kibana –¥–∞—à–±–æ—Ä–¥–æ–≤..."
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Kibana
    echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Kibana..."
    until curl -s http://localhost:5601/api/status &>/dev/null; do
        echo "Kibana –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º..."
        sleep 5
    done
    
    # –°–æ–∑–¥–∞–µ–º index pattern
    echo "–°–æ–∑–¥–∞–Ω–∏–µ index pattern..."
    curl -X POST "http://localhost:5601/api/saved_objects/index-pattern/messenger-logs" \
        -H "Content-Type: application/json" \
        -H "kbn-xsrf: true" \
        -d '{
            "attributes": {
                "title": "messenger-logs-*",
                "timeFieldName": "@timestamp"
            }
        }' 2>/dev/null || echo "Index pattern —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    echo "‚úÖ Kibana –¥–∞—à–±–æ—Ä–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    echo "üîó –û—Ç–∫—Ä–æ–π—Ç–µ Kibana: http://localhost:5601"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-help}" in
    start)
        start_elk
        ;;
    stop)
        stop_elk
        ;;
    restart)
        restart_elk
        ;;
    logs)
        show_logs
        ;;
    status)
        show_status
        ;;
    test)
        send_test_logs
        ;;
    clean)
        clean_data
        ;;
    backup)
        backup_logs
        ;;
    dashboards)
        setup_kibana_dashboards
        ;;
    help|*)
        show_help
        ;;
esac
