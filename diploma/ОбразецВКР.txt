МИНОБРНАУКИ РОССИИ
федеральное государственное автономное образовательное
учреждение высшего образования
«Омский государственный университет им. Ф.М. Достоевского»
Кафедра компьютерной математики и программного обеспечения
УТВЕРЖДАЮ
Заведующий кафедрой
___________ Симанчев Р. Ю.
«___» ___________ 20__ г.
РАЗРАБОТКА КЛИЕНТ-СЕРВЕРНОГО ПРИЛОЖЕНИЯ ДЛЯ
АВТОМОЙКИ
Выпускная квалификационная работа по направлению
01.04.02 – Прикладная математика и информатика
Научный руководитель:
доцент кафедры, к.ф.-м.н.
___________ Уразова И.В.
«___» ___________ 20__ г.
Выполнила:
студентка группы МММ-201-О
___________ Платицына Л.А.
«____» ___________ 20__ г.
Омск, 2024
2
Содержание
Введение............................................................................................................... 3
Глава 1. Анализ предметной области.................................................................4
1. Постановка задачи......................................................................................4
2. Выбор технологического стека для разработки приложения.................5
Глава 2. Проектирование приложения...............................................................7
1. User-stories...................................................................................................7
2. Описание функциональности....................................................................9
Глава 3. Клиентская часть.................................................................................12
1. Архитектура и интерфейс приложения.................................................. 12
1.1 Сайт.................................................................................................... 12
1.2 Автоматическое рабочее место (АРМ) Администратор................ 17
1.3 Автоматическое рабочее место (АРМ) Владелец...........................22
Глава 4. Серверная часть...................................................................................26
1. Архитектура серверной части................................................................. 26
2. Архитектура хранения данных............................................................... 27
Заключение....................................................................................................32
Список литературы............................................................................................33
3
Введение
В настоящее время люди располагают все меньшим количеством
свободного времени. Поэтому предпочитают заранее на сайтах компаний
ознакамливаться с предоставляемыми услугами, их описанием и ценами.
Кроме того выбрать себе подходящую компанию исходя из
местоположения, режима работы или других критериев. Вместе с этим
иметь возможность предварительно записаться на предпочтительные
услуги. Таким образом компании не имеющие сайта или страницы в
социальных сетях теряют клиентов.
Однако также за неимением времени люди могут воспользоваться
услугами по пути, например, увидев вывеску или по картам. Для этого
всегда в компаниях должен быть сотрудник, который может оформить
заказ, зарегистрировать клиента и решить спорные ситуации.
В свою очередь владелец компании хочет предотвратить вероятность
мошенничества сотрудников путем автоматизации бизнес процессов.
Помимо этого необходимо собирать данные для дальнейшего анализа и
стратегического управления.
Данная дипломная работа предоставит практический пример
разработки клиент-серверного приложения для автомойки, позволяющее
клиенту получить необходимую информацию, а так же записаться на
выбранные услуги. В свою очередь удовлетворяющее всем пожеланиям
владельца.
4
Глава 1. Анализ предметной области
1. Постановка задачи
Разработать клиент-серверное приложение, состоящее из трех web
модулей: сайт, автоматизированное рабочее место(АРМ) Администратора и
Владельца.
Сайт должен включать в себя следующие страницы:
● «Главная» - на данной странице располагается информацией об
автомойке. Помимо этого, форма обратной связи.
● «Услуги» - страница, на которой представлен список оказываемых
услуг.
● «Заказать услугу» - страница записи на услугу или на услуги.
● «Прайс» - страница, показывающая цены на услуги.
● «Контакты» - страница, содержащая содержащая контакты
компании.
● «Личный кабинет» - страница с личной информацией конкретного
клиента.
● Помимо этого страницы «Вход» и «Регистрация» для авторизация
клиента.
АРМ Администратора должно содержать следующие страницы:
● Вход в систему.
● Регистрация нового клиента.
● Заказа услуг.
● Открытия и закрытия смены.
● Создания графика смен.
● Добавления отгула сотруднику.
● Просмотра почты, состоящей из обращений клиентов.
5
АРМ Владельца должно содержать следующие страницы:
● Вход в систему.
● Справочник услуг.
● Справочник типов транспортных средств.
● Справочник марок транспортных средств.
● Тарифы (где можно изменить или добавить тариф).
● Скидочные системы (где можно добавить или изменить скидки).
● Статистика (где можно посмотреть статистику по услугам за
определенный период).
● Сотрудники (где можно посмотреть список сотрудников).
2. Выбор технологического стека для разработки приложения
Средой разработки была выбрана WebStorm. Это интегрированная среда
разработки (IDE) для разработки программного обеспечения. Она
предоставляет разработчикам удобные инструменты для разработки, отладки и
тестирования приложений на различных языках программирования, таких как
JavaScript и TypeScript. WebStorm является продуктом компании JetBrains и
предоставляет работать над проектами любой сложности.
WebStorm предоставляет мощные инструменты для отладки и
развертывания приложений, что помогает эффективности программ.
Возможность расширения функциональности IDE с помощью плагинов
позволяет настраивать среду разработки под конкретные потребности
разработчика.
В качестве языка программирования для клиентской части был выбран
Javascript с использованием библиотек Axios, Mobx, React с компонентами
Bootstrap, inputmask, Router DOM.
Axios [1] - это HTTP-клиент, основанный на Promise для node.js и браузера.
Он изоморфный (может работать в браузере и node.js с той же базой кодов). На
6
стороне сервера он использует нативный node.js http-модуль, тогда как на
стороне клиента (браузер) он использует XMLHttpRequests.
Mobx [2] — это библиотека, дающая разработчикам инструмент для
глобального использования переменных и методов между разными
компонентами. Mobx простая и понятная в использовании библиотека,
использующая в своей реализации Context API и, по сравнению с Redux,
требующая минимум шаблонного кода для инициализации стора. Mobx сторы
хорошо масштабируются и для каждого стора можно определить его область
видимости, помещая соответствующие компоненты внутрь провайдеров стора.
React (иногда React.js или ReactJS) [3] — JavaScript-библиотека с открытым
исходным кодом для разработки пользовательских интерфейсов.
React может использоваться для разработки одностраничных и мобильных
приложений. Его цель — предоставить высокую скорость разработки, простоту
и масштабируемость.
Bootstrap [4] — это бесплатный CSS-фреймворк с открытым исходным
кодом, предназначенный для быстрой верстки адаптивных интерфейсов сайтов
и веб-приложений с ориентацией на мобильные устройства. Bootstrap
используется многими веб-разработчиками по всему миру. Он является очень
популярным. По данным W3Techs, Bootstrap используется на 19% всех
веб-сайтов.
Inputmask [5]— это библиотека javascript, которая создает маску ввода.
Маска ввода помогает пользователю с вводом, обеспечивая предопределенный
формат. Это может быть полезно для дат, чисел, телефонных номеров и многого
другого.
React Router [6] – это библиотека для навигации между разными частями
веб-приложения, созданными на React. Она позволяет менять содержимое
страницы без перезагрузки браузера, что делает приложение более
интерактивным и удобным для пользователей.
7
Для серверной части был опять же был выбран Javascript с использованием
библиотек Node.js, фреймворк Express.
Node или Node.js [7] — программная платформа, основанная на движке V8
(компилирующем JavaScript в машинный код), превращающая JavaScript из
узкоспециализированного языка в язык общего назначения. Node.js добавляет
возможность JavaScript взаимодействовать с устройствами ввода-вывода через
свой API, написанный на C++, подключать другие внешние библиотеки,
написанные на разных языках, обеспечивая вызовы к ним из JavaScript-кода.
Node.js применяется преимущественно на сервере, выполняя роль веб-сервера,
но есть возможность разрабатывать на Node.js и десктопные оконные
приложения (при помощи NW.js, AppJS или Electron для Linux, Windows и
macOS) и даже программировать микроконтроллеры (например, tessel, low.js и
Espruino). В основе Node.js лежит событийно-ориентированное и асинхронное
(или реактивное) программирование с неблокирующим вводом/выводом.
Express.js, или просто Express [8] — фреймворк web-приложений для
Node.js, реализованный как свободное и открытое программное обеспечение
под лицензией MIT. Он спроектирован для создания веб-приложений и API.
Де-факто является стандартным каркасом для Node.js. Автор фреймворка, TJ
Holowaychuk, описывает его как созданный на основе написанного на языке
Ruby каркаса Sinatra, подразумевая, что он минималистичен и включает
большое число подключаемых плагинов. Express может являться backend’ом
для программного стека MEAN, вместе с базой данных MongoDB и каркасом
Vue.js, React или AngularJS для frontend’а.
Также в проекте используются:
PostgreSQL [9] — свободная объектно-реляционная система управления
базами данных (СУБД). С помощью PostgreSQL можно создавать, хранить базы
данных и работать с данными с помощью запросов на языке SQL.
Sequelize [10] - это ORM-библиотека для приложений на Node.js, которая
осуществляет сопоставление таблиц в бд и отношений между ними с классами.
8
При использовании Sequelize мы можем не писать SQL-запросы, а работать с
данными как с обычными объектами. Причем Sequelize может работать с рядом
СУБД - MySQL, Postgres, MariaDB, SQLite, MS SQL Server.
Cross-origin resource sharing (CORS; с англ. — «совместное использование
ресурсов между разными источниками») [11] — технология современных
браузеров, которая позволяет предоставить веб-страницам доступ к ресурсам
другого домена.
9
Глава 2. Проектирование приложения
1. User-stories
Как неавторизованный пользователь, я хочу:
● посмотреть информацию об автомойке, чтобы принять решение об
использовании услуг.
● воспользоваться формой обратной связи, чтобы задать возникший
вопрос или уточнить интересующий момент.
● посмотреть список услуг и их описание, чтобы выбрать подходящие
мне.
● ознакомиться с прайс листом, чтобы заранее знать цены на услуги.
● зарегистрироваться или авторизоваться, чтобы оформить заказ.
Как авторизованный пользователь, я хочу:
● оформить заказ, чтобы воспользоваться услугами автомойки.
● посмотреть историю заказов, чтобы вспомнить когда и какая услуга
была оказана.
● узнать баланс накопительного счета, чтобы знать можно ли
оплатить услуги через него.
● посмотреть информацию об автомойке, чтобы узнать о новых
услугах, акциях.
● воспользоваться формой обратной, чтобы задать возникший вопрос
или уточнить интересующий момент.
● посмотреть список услуг и их описание, чтобы выбрать
подходящие.
● ознакомиться с прайс листом, чтобы узнать текущие цены на
услуги.
● сменить логин и пароль, в случае необходимости.
10
● посмотреть список машин, чтобы знать для каких машин уже
оказывались услуги.
● посмотреть скидки, чтобы знать выгодные предложения.
● добавить машину, чтобы заказать услуги на новую машину.
Как администратор, я хочу:
● зарегистрировать клиента, чтобы он мог воспользоваться услугами
автомойки на месте.
● оформить заказ, чтобы обслуживать клиента на месте.
● добавлять или изменять номер мобильного телефона клиента,
чтобы при возникновении ситуации решить ее.
● добавлять и изменять номера карты клиента, чтобы клиент мог
переносить накопленные средства.
● открыть смену, чтобы назначить сотрудников.
● закрыть смену, чтобы владелец смог совершить инкассацию, а
также для выдачи штрафов сотрудникам.
● создать график смен, чтобы распределить нагрузку равномерно
между сотрудниками.
● добавить отгул сотруднику, чтобы выдать дополнительное время
отдыха, например ,по болезни.
● вводить штрафы текущей сессии, чтобы взыскать ущерб за плохо
сделанную работу или за нарушение профессиональной этики.
● выбирать сотрудников для текущей сессии, чтобы назначить на
заказ.
Как владелец, я хочу:
● редактировать различные справочники, чтобы вносить туда
необходимые изменения.
● редактировать тарифы, чтобы вносить изменения.
11
● просматривать статистику, чтобы регулировать ценообразование.
● просматривать часы работы персонала, чтобы регулировать
загруженность.
● выдавать зарплаты и аванса, чтобы знать расчет суммы.
● редактировать списка сотрудников, чтобы иметь актуальный список
штата.
2. Описание функциональности
Для моделирования возможностей использования сайта пользователем
используется use-case диаграмма (рис.1).
Рис. 1. Use-case диаграмма использования сайта
12
Неавторизованный пользователь может просматривать все
общедоступные страницы. Для оформления заказа ему необходимо
зарегистрироваться, указав фамилию, имя, отчество, логин, пароль, почту и
номер телефона, или авторизоваться, указав логин или email и пароль.
Далее авторизованный пользователь может перейти в личный кабинет для
того чтобы ознакомится со скидками, историей заказов, списком машин,
балансом накопительного счета, а также сменить логин или пароль и добавить
машину.
Для моделирования возможностей администратора на своем
автоматизированном рабочем месте использовалась следующая use-case
диаграмма (рис. 2)
Рис. 2. Use-case диаграмма АРМ Администратота
Для моделирования возможностей владельца на своем
автоматизированном рабочем месте использовалась следующая use-case
диаграмма (рис. 3).
13
Рис. 3. Use-case диаграмма АРМ Владельца
14
Глава 3. Клиентская часть
1. Архитектура и интерфейс приложения
1.1 Сайт
На рис. 4 представлена главная страница сайта. Она автоматически
открывается при запуске сайта.
В Header представлены логотип, адрес и телефон компании также блок
авторизации с кнопками «Войти» и «Зарегистрироваться», которые после
авторизации сменяются на кнопку «Личный кабинет». Кроме того содержится
навигационное меню.
В Body расположены 3 фотографии автомойки (снаружи, внутри и зала
ожидания), ниже размещена информация об автомойке и форма для обратной
связи, в случае возникновения вопросов или предложений. Используются
стоковые изображения сайта Freepik.com [14].
В Footer продублирована информация с адресом и номером телефона,
помимо этого содержится информация о создателе.
Рис. 4. Главная страница
15
Если в меню нажать кнопку «Услуги», то пользователь попадает на
одноименную страницу (рис.5).
На данной странице представлен список оказываемых услуг. При нажатии
на название услуги открывается страница с описанием выбранной услуги
(рис.6).
Рис. 5. Страница услуг Рис. 6. Страница описания услуги
Далее перейдя на страницу с ценами, нажав кнопку «Прайс»,
пользователь видит лишь блок с выбором типа транспортного средства
(ТС) (рис. 7). После выбора типа ТС появляется таблица с ценами за
услуги только для заданного типа (рис. 8).
Рис. 7. Страница прайс изначально Рис. 8. Страница прайс после выбора типа
Нажимая на кнопку «Контакты» пользователь может ознакомится с
картой, на которой указано местонахождение автомойки, изучить график
16
работы, способы связи с компанией или задать интересующий вопрос в форме.
(рис. 9).
Рис. 9. Страница контактов
На этом заканчиваются общедоступные страницы сайта. Чтобы
пользоваться остальными страницами сайта необходимо перейти на страницу
авторизации (рис. 10) для входа в систему, либо на страницу регистрации (рис.
11).
Рис. 10. Страница авторизации
Поговорим подробнее о странице регистрации. Пользователю необходимо
ввести необходимые данные, такие как фамилия, имя, отчество(если есть ),
логин, пароль, телефон и адрес электронной почты. С целью уменьшения
проверок вводимых данных на валидность используется выше упомянутая
библиотека Inputmask, для создания масок на данные с телефоном и адресом
17
электронной почты. С данными фамилии, имени и отчества используются
паттерны позволяющие вводить только буквы русского алфавита.
Рис. 10. Страница регистрации
После аутентификации пользователь может записаться на выбранную
услугу или услуги, а также пользоваться личным кабинетом.
С этого момента и далее авторизованного пользователя будем считать
клиентом.
Начнем со страницы заказа (рис. 11), на которую можно попасть нажав
кнопку «Заказать услугу». На данной странице пользователю необходимо
ввести номер бонусной карты(если она есть), гос. номер ТС и номер телефона,
выбрать тип автомобиля, услугу или услуги и дату.
На ввод данных бонусной карты, гос. номера и номера телефона
используется все та же библиотека Inputmask.
При оформлении заказа автоматически учитываются доступные акции.
18
Рис. 11. Страница заказа услуг
По кнопке «Личный кабинет» перейдет на одноименную страницу (рис.
12). На этой странице клиент может ознакомиться с балансом на накопительном
счете, вместе с тем узнать историю, выбрав из списка нужный гос. номер.
Рис. 12. Страница личного кабинета
На текущей странице реализованы 3 модальных окна:
19
● Смена логина (рис.13)
● Смена пароля (рис. 14)
● Скидки (рис. 15)
Которые всплывают при нажатии на одноименные кнопки.
Рис. 13. Смена логина Рис. 14. Смена пароля Рис. 15. Скидки
Нажав на кнопку «Машины» попадает на одноименную страницу(рис. 16)
с информацией о всех своих машинах, с возможностью добавить новую или
удалить уже существующую. Ввод гос. номера также реализован с помощью
маски из библиотеки Inputmask.
Рис. 12. Страница машины
20
1.2 Автоматическое рабочее место (АРМ) Администратор
Запуская свое рабочее место администратор попадает на страницу
авторизации (рис.13) и пока не войдет в систему ничего больше ему доступно
не будет.
Рис. 13. Страница авторизации
Все страницы имеют общие боковое меню, а в заголовке написано
название страницы.
После авторизации администратору нужно начать смену (рис. 14), сделать
это можно перейдя в боковом меню по одноименной ссылке. Администратору
необходимо указать сумму в кассе, отметить пришедших на смену сотрудников,
их список выводится исходя из графика, а также назначить старшего смены.
Рис. 14. Страница открытия смены
21
Перейдя по ссылке «Новый клиент» администратор попадает на страницу
(рис. 15), где видит форму для регистрации клиента, но в отличии от сайта здесь
происходит одновременная регистрация клиента с машиной. Аналогично с
сайтом происходят проверки данных с помощью масок и паттернов с такими же
свойствами. По итогу регистрации пользователю выдается пароль, для входа в
систему.
Рис. 15. Страница регистрации клиента
Нажав на ссылку «Заказ услуги» открывается страница (рис. 16), на
которой находится форма заказа услуг, она почти идентична с сайтом, различия
лишь в том что указывается сотрудник, который будет выполнять заказ.
Рис. 16. Страница заказа услуг
22
Переходя на страницу «Почта» (рис.17) по одноименной ссылке
появляется страница со всеми обращениями от пользователей, сделанные через
форму обратной связи.
Рис. 17. Страница почты
Попадая на страницу «Создания графика смен»(рис.18), по ссылки с
таким же названием, администратор выбирая день, добавляет сотрудников в
смену. Потом в день смены список сотрудников выгружается для отметок о
присутствии на рабочем месте.
Рис. 18. Страница создания графика смен
23
Для добавления отгула сотруднику (рис.19), необходимо перейти по
ссылки «Добавить отгул сотруднику».Это необходимо, чтобы сотрудник не
получил прогул. При добавлении прогула сотрудник удаляется из графика. На
данной странице всего три поля дата, сотрудник и причина.
Рис. 19. Страница добавление отгула сотруднику
К конце рабочего дня необходимо завершить смену, сделать это можно на
странице «Закрыть смену» (рис.20). Попасть туда можно по одноименной
ссылки.
Сначала нужно указать сумму в кассе и сумму инкассации. Далее
нажимая кнопку «Перейти к штрафам» оказывается на странице (рис.21), где
указываются сотрудники, совершившие нарушения, делясь на три категории в
зависимости от степени нарушения. Ниже на странице приведены описания
этих категорий.
Рис. 20. Страница закрытия смены
24
Рис. 21. Страница штрафов
1.3 Автоматическое рабочее место (АРМ) Владелец
Аналогично с администратором, владелец без авторизации (рис. 22) не
может использовать свое АРМ.
Рис. 22. Страница авторизации
Как и у администратора, все страницы имеют общие боковое меню, а в
заголовке написано название страницы.
Только владелец может вносить изменения в справочники, тарифы и
скидочную систему. Специально для этого созданы страницы «Справочник
услуг» (рис.23), «Справочник типов ТС» (рис.24), «Справочник марок машин»
(рис.25), «Тарифы» (рис.26), «Скидочная система» (рис.27). Попасть на них
можно через одноименные ссылки.
25
Рис. 23. Страница справочника услуг Рис. 24. Страница справочника типов ТС
Рис. 25. Страница справочника марок машин Рис. 26. Страница тарифов
Рис. 27. Страница скидочной системы
Помимо этих страниц есть страница «Статистика» (рис.28), где показывается
информация о количестве выполненных услуг за определенное время.
26
Рис. 28. Страница статистики
Последняя ссылка «Сотрудники» приводит на страницу с таким же названием
(рис.29), где показывается список всех сотрудников, помимо этого есть две кнопки:
одна - ведет к странице «Добавить сотрудника» (рис.30), вторая - к странице
«Штрафы» (рис.31) кнопки имеют интуитивно понятные названия.
На первой странице находится формочка, на которой проверки данных
происходит с помощью масок библиотеки Inputmask и паттернов с такими же
свойствами.
Рис. 29. Страница сотрудников
27
Рис. 30. Страница добавление сотрудника Рис. 31. Страница штрафов
28
Глава 4. Серверная часть
1. Архитектура серверной части
Все три компоненты клиентской части (сайт, АРМ администратора и
АРМ владельца) взаимодействуют с одной и той же базой данных.
Архитектура приложения представлена на рисунке 32. Пользователь
взаимодействует с пользовательским интерфейсом, который общается с
серверной частью через Rest API по протоколу HTTP(S). Серверная часть
является посредником между клиентом и базой данных.
Рис. 32
Начнет более детальное изучение архитектуры с база данных. В данной
работе использовалась СУБД PostgreSQL 15.6. Данные в PostgreSQL хранятся в
различных схемах для управления правами доступа и организации структуры
данных.
Связь Nodejs и базы данных происходит посредством ORM Sequelize,
которое позволяет взаимодействовать с базой данных не используя язык
программирования SQL.
Связь между клиентской и серверной частью осуществляется при помощи
Rest API по протоколу HTTP, передавая и получая данные для отображения
пользователю. Пользователь взаимодействует только с frontend частью, чем
является клиентским веб-приложением. Для этого на стороне серверной части
используется Cross-origin resource sharing. Со стороны клиентской части за это
отвечает Axios.
29
Сама серверная часть реализована на Nodejs с использованием
фреймворка Express.js представляет из себя прослойку между клиентской
частью и базой данных. Бизнес-логика приложения хранится в базе данных, что
позволяет централизованно управлять данными и обрабатывать их.
2. Архитектура хранения данных
В базе данных имеются несколько пользователей:
● клиент, может только просматривать данные об автомойке, сделать заказ и
редактировать личные данные.
● администратор, взаимодействие с сотрудниками, за исключением
добавления.
● владелец, редактирование данных об автомойке, добавление сотрудников
и просмотр статистики.
Также есть сущность сотрудник, у которого нет доступа к клиентской
части, однако через взаимодействие происходит через администратора.
Для разграничения прав доступа у пользователя указывается роль. Это
обеспечивает эффективное и безопасное функционирование системы,
гарантируя правильное распределение обязанностей и функционала среди
пользователей с различными ролями и уровнями доступа.
Для безопасность данных пароли хранятся зашифрованные с помощью
bcrypt, а токены доступа создаются при помощи JSON Web Token.
Немного информации об этих инструментах:
● bcrypt [12] — адаптивная криптографическая хеш-функция
формирования ключа, используемая для защищенного хранения
паролей.
● JSON Web Token [13] (JWT) — это открытый стандарт для создания
токенов доступа, основанный на формате JSON. Как правило,
используется для передачи данных для аутентификации в
клиент-серверных приложениях.
30
Ниже приведена ER-диаграмма пользователя (рис.33) и ER-диаграмма
сотрудника (рис.34), на которых представлены их взаимодействия с другими
сущностями.
Рис. 33. ER-диаграмма пользователя
31
Рис. 34. ER-диаграмма сотрудника
Ниже представлена таблица, описывающая все сущности с их атрибутами и
опасениями.
Таблица 1. Сущности, их атрибуты и описание
Сущность Атрибуты Описание
car brand name - название (PK) Сущность,
представляющая
марку машины
car number - номер (PK)
userId - идентификатор владельца машины
(FK на сущность user)
Сущность,
представляющая
машину
32
carBrandName - название марки машины
(FK на сущность car brand)
vehicleTypeName - название типа ТС (FK на
сущность vehicle type)
discount id - идентификатор (PK)
startDate - дата начала акции
endDate - дата окончания акции
service - название услуги
vehicle_type - тип ТС
size - размер
Сущность,
представляющая
акцию
employee id - идентификатор (PK)
passport_details - паспортные данные
salary - размер зарплаты
userId - идентификатор пользователя (FK на
сущность user)
Сущность,
представляющая
сотрудника
fined
employee
id - идентификатор (PK)
employeeId -идентификатор сотрудника(FK
на сущность employee)
fineId - идентификатор штрафа (FK на
сущность fine)
Сущность,
представляющая
связь между
сотрудником и
штрафом
fine id - идентификатор (PK)
sum - сумма
cause - причина
Сущность,
представляющая
штраф
leaved
employee
id - идентификатор (PK)
employeeId -идентификатор сотрудника(FK
на сущность employee)
Сущность,
представляющая
связь между
33
leaveId - идентификатор отгула(FK на
сущность leave)
сотрудником и
отгулам
leave id - идентификатор (PK)
date - дата
cause - причина
Сущность,
представляющая
отгул
message id - идентификатор (PK)
name - имя пользователя
email - адрес электронной почты
пользователя
phone - телефон пользователя
content - сообщение
processing - готовность
Сущность,
представляющая
сообщения с
формы обратной
части
order
employees
id - идентификатор (PK)
employeeId -идентификатор сотрудника(FK
на сущность employee)
orderId - идентификатор заказа(FK на
сущность order)
Сущность,
представляющая
связь между
сотрудником и
заказам
order id - идентификатор (PK)
date_with_time - время, на которое заказано
услуга
sum - общая сумма заказа
userId - идентификатор пользователя (FK на
сущность user)
carNumber - номер машины (FK на
сущность car)
Сущность,
представляющая
заказ
34
serviceId - идентификатор услуги
(FK на сущность service)
role type- идентификатор (PK) Сущность,
представляющая
роль
saving
account
card_number - номер карты (PK)
balance - баланс
userId - идентификатор пользователя (FK на
сущность user)
Сущность,
представляющая
бонусный счет
service id - идентификатор (PK)
name - название
description - описание
Сущность,
представляющая
услугу
tariff id - идентификатор (PK)
price - цена услуги
serviceId - идентификатор услуги
(FK на сущность service)
vehicleTypeName - название типа ТС (FK на
сущность vehicle type)
Сущность,
представляющая
тариф
user id - идентификатор (PK)
surname - фамилия
name - имя
middle_name - отчество
login - логин
password - пароль
email - адрес электронной почты
phone - номер телефона
Сущность,
представляющая
пользователя
35
roleType - название роли (FK на сущность
role)
vehicle
type
name - название (PK)
description - описание
Сущность,
представляющая
тип ТС
work
employee
id - идентификатор (PK)
presence - посещаемость
employeeId - идентификатор сотрудника(FK
на сущность employee)
workShiftId - идентификатор рабочей смены
(FK на сущность work Shift)
Сущность,
представляющая
связь между
сотрудником и
рабочей сменой
work_shift id - идентификатор (PK)
startSum - начальная цена
endSum - конечная цена
date - дата
Сущность,
представляющая
рабочую смену
36
Заключение
В рамках выполнения дипломной работы были успешно осуществлены
сформулированные цели и задачи исследования. Проанализирована предметная
область, выбраны современные и эффективные технологии разработки.
Разработано клиент-серверное приложение для автомойки позволяющее
каждому пользователю системы имея свои права и доступы корректно им
пользоваться.
37
Список литературы
1. Документация Axios [Электронный ресурс]:
Режим доступа: https://axios-http.com/ru/docs/intro, свободный
2. Документация MobX [Электронный ресурс]:
Режим доступа:https://mobx.js.org/README.html, свободный
3. Документация Reactjs [Электронный ресурс]:
Режим доступа: https://ru.legacy.reactjs.org/, свободный
4. Документация Bootstrap [Электронный ресурс]:
Режим доступа: https://react-bootstrap.netlify.app/, свободный
5. Документация Inputmask[Электронный ресурс]:
Режим доступа: https://primereact.org/inputmask/, свободный
6. Документация React Router [Электронный ресурс]:
Режим доступа:https://reactrouter.com/en/main, свободный
7. Документация Node Js [Электронный ресурс]:
Режим доступа: https://nodejs.org/en, свободный
8. Документация Express Js [Электронный ресурс]:
Режим доступа: https://expressjs.com/, свободный
9. Документация PostgreSQL [Электронный ресурс]:
Режим доступа: https://www.postgresql.org/, свободный
10. Документация Sequelize [Электронный ресурс]:
Режим доступа: https://sequelize.org/, свободный
11. Документация CORS [Электронный ресурс]:
Режим доступа: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS,
свободный
12. Документация Bcrypt [Электронный ресурс]:
Режим доступа: https://www.npmjs.com/package/bcrypt, свободный
13. Документация JSON Web Token [Электронный ресурс]:
Режим доступа: https://jwt.io/, свободный
14. Сайт со стоковыми изображениями Freepik [Электронный ресурс]:
38
Режим доступа: https://ru.freepik.com/popular-photos, свободный