#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ Kubernetes
# –ê–≤—Ç–æ—Ä: –î–∏–ø–ª–æ–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
# –í–µ—Ä—Å–∏—è: 1.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v kubectl &> /dev/null; then
        error "kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    if ! kubectl cluster-info &> /dev/null; then
        error "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é kubectl."
        exit 1
    fi
    
    log "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ"
}

# –°–æ–∑–¥–∞–Ω–∏–µ namespace
create_namespace() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ namespace..."
    
    kubectl apply -f k8s/namespace.yaml
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ namespace
    kubectl wait --for=condition=Active namespace/messenger --timeout=60s
    
    log "Namespace —Å–æ–∑–¥–∞–Ω ‚úÖ"
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ConfigMaps –∏ Secrets
apply_configs() {
    log "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    
    # ConfigMaps
    kubectl apply -f k8s/configmaps.yaml
    kubectl apply -f k8s/postgres-init-configmap.yaml
    
    # Secrets
    kubectl apply -f k8s/secrets.yaml
    
    log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ‚úÖ"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ PostgreSQL
deploy_postgres() {
    log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ PostgreSQL..."
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤ PostgreSQL
    kubectl apply -f k8s/deployments/postgres.yaml
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL master
    info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL master..."
    kubectl wait --for=condition=available deployment/postgres-master -n messenger --timeout=300s
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL slave
    info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL slave..."
    kubectl wait --for=condition=available deployment/postgres-slave -n messenger --timeout=300s
    
    log "PostgreSQL —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç ‚úÖ"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
deploy_microservices() {
    log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É
    info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ auth-service..."
    kubectl apply -f k8s/deployments/auth-service.yaml
    kubectl wait --for=condition=available deployment/auth-service -n messenger --timeout=300s
    
    info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ message-service..."
    kubectl apply -f k8s/deployments/message-service.yaml
    kubectl wait --for=condition=available deployment/message-service -n messenger --timeout=300s
    
    info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ notification-service..."
    kubectl apply -f k8s/deployments/notification-service.yaml
    kubectl wait --for=condition=available deployment/notification-service -n messenger --timeout=300s
    
    info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ monitoring-service..."
    kubectl apply -f k8s/deployments/monitoring-service.yaml
    kubectl wait --for=condition=available deployment/monitoring-service -n messenger --timeout=300s
    
    log "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã ‚úÖ"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Nginx Gateway
deploy_nginx() {
    log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Nginx Gateway..."
    
    kubectl apply -f k8s/deployments/nginx.yaml
    kubectl wait --for=condition=available deployment/nginx-gateway -n messenger --timeout=300s
    
    log "Nginx Gateway —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç ‚úÖ"
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Services
apply_services() {
    log "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Services..."
    
    kubectl apply -f k8s/services.yaml
    
    log "Services –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ‚úÖ"
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Ingress
apply_ingress() {
    log "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Ingress..."
    
    kubectl apply -f k8s/ingress.yaml
    
    log "Ingress –ø—Ä–∏–º–µ–Ω–µ–Ω ‚úÖ"
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ HPA
apply_hpa() {
    log "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Horizontal Pod Autoscaler..."
    
    kubectl apply -f k8s/hpa.yaml
    
    log "HPA –ø—Ä–∏–º–µ–Ω–µ–Ω ‚úÖ"
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Network Policies
apply_network_policies() {
    log "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Network Policies..."
    
    kubectl apply -f k8s/network-policies.yaml
    
    log "Network Policies –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ‚úÖ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
check_deployment_status() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    echo ""
    info "–°—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤:"
    kubectl get pods -n messenger -o wide
    
    echo ""
    info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    kubectl get services -n messenger
    
    echo ""
    info "–°—Ç–∞—Ç—É—Å ingress:"
    kubectl get ingress -n messenger
    
    echo ""
    info "–°—Ç–∞—Ç—É—Å HPA:"
    kubectl get hpa -n messenger
    
    echo ""
    info "–°—Ç–∞—Ç—É—Å PVC:"
    kubectl get pvc -n messenger
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ
get_access_info() {
    log "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP LoadBalancer
    EXTERNAL_IP=$(kubectl get service nginx-gateway-service -n messenger -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
    
    if [ "$EXTERNAL_IP" = "pending" ] || [ -z "$EXTERNAL_IP" ]; then
        EXTERNAL_IP=$(kubectl get service nginx-gateway-service -n messenger -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "localhost")
    fi
    
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
    echo "   Frontend: http://$EXTERNAL_IP"
    echo "   API: http://$EXTERNAL_IP/api"
    echo ""
    echo "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "   Metrics: http://$EXTERNAL_IP/metrics"
    echo "   Health: http://$EXTERNAL_IP/health"
    echo ""
    echo "üìä Kubernetes Dashboard:"
    echo "   kubectl proxy"
    echo "   http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"
    echo ""
    echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   kubectl get all -n messenger"
    echo "   kubectl logs -f deployment/auth-service -n messenger"
    echo "   kubectl describe pod <pod-name> -n messenger"
    echo "   kubectl port-forward service/postgres-master-service 5432:5432 -n messenger"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ Kubernetes"
    
    check_dependencies
    create_namespace
    apply_configs
    deploy_postgres
    
    info "–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL..."
    sleep 60
    
    deploy_microservices
    deploy_nginx
    apply_services
    apply_ingress
    apply_hpa
    apply_network_policies
    
    info "–û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã..."
    sleep 30
    
    check_deployment_status
    get_access_info
    
    log "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'error "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
