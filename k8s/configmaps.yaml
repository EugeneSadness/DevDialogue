apiVersion: v1
kind: ConfigMap
metadata:
  name: messenger-config
  namespace: messenger
  labels:
    app.kubernetes.io/name: messenger
    app.kubernetes.io/component: config
data:
  # Database configuration
  DB_HOST: "postgres-master-service"
  DB_PORT: "5432"
  DB_SLAVE_HOST: "postgres-slave-service"
  DB_SLAVE_PORT: "5432"
  
  # Service URLs
  AUTH_SERVICE_URL: "http://auth-service:3001"
  MESSAGE_SERVICE_URL: "http://message-service:3002"
  NOTIFICATION_SERVICE_URL: "http://notification-service:3003"
  MONITORING_SERVICE_URL: "http://monitoring-service:3004"
  
  # Application configuration
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  
  # JWT configuration
  JWT_EXPIRES_IN: "24h"
  REFRESH_TOKEN_EXPIRES_IN: "7d"
  
  # VAPID configuration
  VAPID_SUBJECT: "mailto:admin@messenger.local"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-service-config
  namespace: messenger
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: config
data:
  PORT: "3001"
  DB_NAME: "auth_db"
  DB_USER: "auth_user"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: message-service-config
  namespace: messenger
  labels:
    app.kubernetes.io/name: message-service
    app.kubernetes.io/component: config
data:
  PORT: "3002"
  DB_NAME: "message_db"
  DB_USER: "message_user"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification-service-config
  namespace: messenger
  labels:
    app.kubernetes.io/name: notification-service
    app.kubernetes.io/component: config
data:
  PORT: "3003"
  DB_NAME: "notification_db"
  DB_USER: "notification_user"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-service-config
  namespace: messenger
  labels:
    app.kubernetes.io/name: monitoring-service
    app.kubernetes.io/component: config
data:
  PORT: "3004"
  DB_NAME: "monitoring_db"
  DB_USER: "monitoring_user"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: messenger
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: config
data:
  POSTGRES_DB: "postgres"
  POSTGRES_USER: "postgres"
  POSTGRES_REPLICATION_USER: "replica"
  # PostgreSQL configuration
  postgresql.conf: |
    # PostgreSQL Master Configuration
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # WAL settings for replication
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    wal_keep_size = 128MB
    wal_sender_timeout = 60s
    
    # Archive settings
    archive_mode = on
    archive_command = 'cp %p /var/lib/postgresql/archive/%f'
    archive_timeout = 300
    
    # Logging
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'mod'
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
  
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration File
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    host    all             all             0.0.0.0/0               md5
    host    replication     replica         0.0.0.0/0               md5
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: messenger
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log main;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
        
        # Upstream servers
        upstream auth_backend {
            server auth-service:3001 max_fails=3 fail_timeout=30s;
        }
        
        upstream message_backend {
            server message-service:3002 max_fails=3 fail_timeout=30s;
        }
        
        upstream notification_backend {
            server notification-service:3003 max_fails=3 fail_timeout=30s;
        }
        
        upstream monitoring_backend {
            server monitoring-service:3004 max_fails=3 fail_timeout=30s;
        }
        
        # Main server block
        server {
            listen 80;
            server_name _;
            
            # Security headers
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # Auth service
            location /api/auth/ {
                limit_req zone=auth burst=10 nodelay;
                proxy_pass http://auth_backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Message service
            location /api/messages/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://message_backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # WebSocket for real-time messaging
            location /socket.io/ {
                proxy_pass http://message_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Notification service
            location /api/notifications/ {
                limit_req zone=api burst=15 nodelay;
                proxy_pass http://notification_backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Monitoring service
            location /api/monitoring/ {
                limit_req zone=api burst=10 nodelay;
                proxy_pass http://monitoring_backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Metrics endpoint
            location /metrics {
                proxy_pass http://monitoring_backend/metrics;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Frontend static files
            location / {
                root /usr/share/nginx/html;
                index index.html index.htm;
                try_files $uri $uri/ /index.html;
            }
        }
    }
