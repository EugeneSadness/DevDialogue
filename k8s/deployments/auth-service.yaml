apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: messenger
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: microservice
    app.kubernetes.io/part-of: messenger
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: auth-service
        app.kubernetes.io/component: microservice
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: auth-service
        image: messenger/auth-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: messenger-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: auth-service-config
              key: PORT
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: messenger-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: messenger-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: auth-service-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: auth-service-config
              key: DB_USER
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: DB_PASS
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: messenger-secrets
              key: JWT_SECRET
        - name: JWT_EXPIRES_IN
          valueFrom:
            configMapKeyRef:
              name: messenger-config
              key: JWT_EXPIRES_IN
        - name: REFRESH_TOKEN_SECRET
          valueFrom:
            secretKeyRef:
              name: messenger-secrets
              key: REFRESH_TOKEN_SECRET
        - name: REFRESH_TOKEN_EXPIRES_IN
          valueFrom:
            configMapKeyRef:
              name: messenger-config
              key: REFRESH_TOKEN_EXPIRES_IN
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 1001
