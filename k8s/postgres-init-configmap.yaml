apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: messenger
  labels:
    app.kubernetes.io/name: postgres-init-scripts
    app.kubernetes.io/component: config
data:
  01-create-replication-user.sql: |
    -- Создание пользователя для репликации
    CREATE USER replica WITH REPLICATION ENCRYPTED PASSWORD 'replica_password';
    
    -- Предоставление прав для репликации
    GRANT CONNECT ON DATABASE postgres TO replica;
    
    -- Создание слота репликации
    SELECT pg_create_physical_replication_slot('replica_slot');
  
  02-create-microservices-databases.sql: |
    -- Создание пользователей для каждого сервиса
    CREATE USER auth_user WITH PASSWORD 'auth_password';
    CREATE USER message_user WITH PASSWORD 'message_password';
    CREATE USER notification_user WITH PASSWORD 'notification_password';
    CREATE USER monitoring_user WITH PASSWORD 'monitoring_password';
    
    -- Создание баз данных для каждого микросервиса
    CREATE DATABASE auth_db OWNER auth_user;
    CREATE DATABASE message_db OWNER message_user;
    CREATE DATABASE notification_db OWNER notification_user;
    CREATE DATABASE monitoring_db OWNER monitoring_user;
    
    -- Предоставление прав пользователям
    GRANT ALL PRIVILEGES ON DATABASE auth_db TO auth_user;
    GRANT ALL PRIVILEGES ON DATABASE message_db TO message_user;
    GRANT ALL PRIVILEGES ON DATABASE notification_db TO notification_user;
    GRANT ALL PRIVILEGES ON DATABASE monitoring_db TO monitoring_user;
  
  03-create-auth-tables.sql: |
    -- Подключение к auth_db
    \c auth_db;
    
    -- Таблица пользователей
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        first_name VARCHAR(50),
        last_name VARCHAR(50),
        avatar_url VARCHAR(255),
        is_active BOOLEAN DEFAULT true,
        last_login TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Таблица сессий пользователей
    CREATE TABLE IF NOT EXISTS user_sessions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        session_token VARCHAR(255) UNIQUE NOT NULL,
        refresh_token VARCHAR(255) UNIQUE NOT NULL,
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        last_accessed TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        ip_address INET,
        user_agent TEXT
    );
    
    -- Таблица refresh токенов
    CREATE TABLE IF NOT EXISTS refresh_tokens (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        token_hash VARCHAR(255) UNIQUE NOT NULL,
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        is_revoked BOOLEAN DEFAULT false,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Индексы
    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
    CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
    CREATE INDEX IF NOT EXISTS idx_refresh_tokens_user_id ON refresh_tokens(user_id);
    
    -- Предоставление прав
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO auth_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO auth_user;
  
  04-create-message-tables.sql: |
    -- Подключение к message_db
    \c message_db;
    
    -- Таблица чатов
    CREATE TABLE IF NOT EXISTS chats (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100),
        description TEXT,
        chat_type VARCHAR(20) DEFAULT 'private',
        created_by INTEGER NOT NULL,
        avatar_url VARCHAR(255),
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Таблица участников чатов
    CREATE TABLE IF NOT EXISTS chat_members (
        id SERIAL PRIMARY KEY,
        chat_id INTEGER REFERENCES chats(id) ON DELETE CASCADE,
        user_id INTEGER NOT NULL,
        role VARCHAR(20) DEFAULT 'member',
        joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        left_at TIMESTAMP WITH TIME ZONE,
        is_active BOOLEAN DEFAULT true,
        UNIQUE(chat_id, user_id)
    );
    
    -- Таблица сообщений
    CREATE TABLE IF NOT EXISTS messages (
        id SERIAL PRIMARY KEY,
        chat_id INTEGER REFERENCES chats(id) ON DELETE CASCADE,
        sender_id INTEGER NOT NULL,
        content TEXT NOT NULL,
        message_type VARCHAR(20) DEFAULT 'text',
        reply_to INTEGER REFERENCES messages(id),
        is_edited BOOLEAN DEFAULT false,
        is_deleted BOOLEAN DEFAULT false,
        edited_at TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Таблица файлов
    CREATE TABLE IF NOT EXISTS files (
        id SERIAL PRIMARY KEY,
        filename VARCHAR(255) NOT NULL,
        original_name VARCHAR(255) NOT NULL,
        file_path VARCHAR(500) NOT NULL,
        file_size BIGINT NOT NULL,
        mime_type VARCHAR(100) NOT NULL,
        uploaded_by INTEGER NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Связь сообщений с файлами
    CREATE TABLE IF NOT EXISTS message_files (
        id SERIAL PRIMARY KEY,
        message_id INTEGER REFERENCES messages(id) ON DELETE CASCADE,
        file_id INTEGER REFERENCES files(id) ON DELETE CASCADE,
        UNIQUE(message_id, file_id)
    );
    
    -- Индексы
    CREATE INDEX IF NOT EXISTS idx_chats_created_by ON chats(created_by);
    CREATE INDEX IF NOT EXISTS idx_chat_members_chat_id ON chat_members(chat_id);
    CREATE INDEX IF NOT EXISTS idx_messages_chat_id ON messages(chat_id);
    CREATE INDEX IF NOT EXISTS idx_messages_sender_id ON messages(sender_id);
    
    -- Предоставление прав
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO message_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO message_user;
  
  05-create-notification-tables.sql: |
    -- Подключение к notification_db
    \c notification_db;
    
    -- Таблица подписок на push уведомления
    CREATE TABLE IF NOT EXISTS push_subscriptions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        endpoint TEXT NOT NULL,
        p256dh_key TEXT NOT NULL,
        auth_key TEXT NOT NULL,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, endpoint)
    );
    
    -- Таблица уведомлений
    CREATE TABLE IF NOT EXISTS notifications (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        title VARCHAR(255) NOT NULL,
        body TEXT NOT NULL,
        type VARCHAR(50) DEFAULT 'message',
        data JSONB,
        is_read BOOLEAN DEFAULT false,
        is_sent BOOLEAN DEFAULT false,
        sent_at TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Таблица настроек уведомлений пользователей
    CREATE TABLE IF NOT EXISTS notification_settings (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL UNIQUE,
        push_enabled BOOLEAN DEFAULT true,
        email_enabled BOOLEAN DEFAULT true,
        message_notifications BOOLEAN DEFAULT true,
        system_notifications BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Индексы
    CREATE INDEX IF NOT EXISTS idx_push_subscriptions_user_id ON push_subscriptions(user_id);
    CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);
    CREATE INDEX IF NOT EXISTS idx_notification_settings_user_id ON notification_settings(user_id);
    
    -- Предоставление прав
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO notification_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO notification_user;
  
  06-create-monitoring-tables.sql: |
    -- Подключение к monitoring_db
    \c monitoring_db;
    
    -- Таблица метрик сервисов
    CREATE TABLE IF NOT EXISTS service_metrics (
        id SERIAL PRIMARY KEY,
        service_name VARCHAR(100) NOT NULL,
        metric_name VARCHAR(100) NOT NULL,
        metric_value DECIMAL(15,6) NOT NULL,
        metric_type VARCHAR(50) NOT NULL,
        labels JSONB,
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Таблица проверок здоровья сервисов
    CREATE TABLE IF NOT EXISTS health_checks (
        id SERIAL PRIMARY KEY,
        service_name VARCHAR(100) NOT NULL,
        status VARCHAR(20) NOT NULL,
        response_time_ms INTEGER,
        error_message TEXT,
        checked_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Таблица логов системы
    CREATE TABLE IF NOT EXISTS system_logs (
        id SERIAL PRIMARY KEY,
        service_name VARCHAR(100) NOT NULL,
        level VARCHAR(20) NOT NULL,
        message TEXT NOT NULL,
        metadata JSONB,
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Таблица алертов
    CREATE TABLE IF NOT EXISTS alerts (
        id SERIAL PRIMARY KEY,
        alert_name VARCHAR(100) NOT NULL,
        service_name VARCHAR(100) NOT NULL,
        severity VARCHAR(20) NOT NULL,
        message TEXT NOT NULL,
        is_resolved BOOLEAN DEFAULT false,
        resolved_at TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Индексы
    CREATE INDEX IF NOT EXISTS idx_service_metrics_service_name ON service_metrics(service_name);
    CREATE INDEX IF NOT EXISTS idx_health_checks_service_name ON health_checks(service_name);
    CREATE INDEX IF NOT EXISTS idx_system_logs_service_name ON system_logs(service_name);
    CREATE INDEX IF NOT EXISTS idx_alerts_service_name ON alerts(service_name);
    
    -- Предоставление прав
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO monitoring_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO monitoring_user;
