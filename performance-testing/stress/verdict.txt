===============================================================================
ВЕРДИКТ ПО РЕЗУЛЬТАТАМ СТРЕСС-ТЕСТИРОВАНИЯ WEBSOCKET СЕРВЕРА
===============================================================================

ОСНОВНЫЕ ПОКАЗАТЕЛИ:
-------------------
- Период тестирования: примерно 2 минуты 20 секунд
- Ограничения CPU/RAM: backend (4 ядра, 2GB), postgres (1 ядро, 1GB), redis (0.5 ядра, 256MB)
- Максимальная нагрузка на backend: CPU 189.67%, RAM 48.56%
- Максимальная нагрузка на postgres: CPU 22.93%, RAM 4.63%
- Максимальная нагрузка на redis: CPU 0.96%, RAM 3.93%

ВЫЯВЛЕННЫЕ УЗКИЕ МЕСТА:
----------------------
1. Основное узкое место - CPU в контейнере backend (189.67% использования)
2. Средняя нагрузка на CPU backend также высокая (123.26%)
3. Использование памяти не является критичным (максимум 48.56% у backend)

ОЦЕНКА МАКСИМАЛЬНОЙ НАГРУЗКИ:
---------------------------
Максимальное количество одновременных пользователей: ~47

ВЫВОДЫ:
------
1. Сервер имеет четкое узкое место по CPU в контейнере backend. При этом 
   использование процессора значительно превышает 100%, что говорит о том, 
   что даже выделенных 4 ядер недостаточно при данной нагрузке.

2. Нагрузка на базу данных PostgreSQL и Redis незначительная (менее 25% CPU),
   что указывает на то, что эти компоненты не являются узким местом в системе.

3. Память используется эффективно и не является ограничивающим фактором.

4. Учитывая, что под backend выделено 25% от всех ресурсов CPU (4 ядра из 16),
   текущая максимальная емкость системы составляет всего около 47 одновременных
   пользователей. Это очень низкий показатель для промышленного WebSocket сервера.

РЕКОМЕНДАЦИИ:
-----------
1. ВЕРТИКАЛЬНОЕ МАСШТАБИРОВАНИЕ:
   - Увеличить количество ядер CPU для контейнера backend минимум до 8-12
   - Ресурсы памяти можно оставить без изменений

2. ГОРИЗОНТАЛЬНОЕ МАСШТАБИРОВАНИЕ:
   - Внедрить несколько экземпляров backend с балансировщиком нагрузки
   - Настроить WebSocket кластер с использованием Redis для обмена сообщениями между узлами

3. ОПТИМИЗАЦИЯ КОДА:
   - Провести профилирование кода backend для выявления узких мест
   - Особое внимание уделить функции handleMessage в messageHandler.js,
     которая обрабатывает сообщения и является критической частью приложения
   - Оптимизировать взаимодействие с базой данных (возможно, есть избыточные запросы)
   - Улучшить кэширование с использованием Redis

4. ДОПОЛНИТЕЛЬНЫЕ ИССЛЕДОВАНИЯ:
   - Провести дополнительное тестирование с большей нагрузкой после оптимизации
   - Добавить мониторинг latency (задержки) для определения качества обслуживания
   - Исследовать возможность асинхронной обработки сообщений

ЗАКЛЮЧЕНИЕ:
---------
Текущая конфигурация системы способна обслуживать только около 47 одновременных 
пользователей, что недостаточно для промышленного использования WebSocket сервера.
Основная проблема - высокая нагрузка на CPU в backend контейнере.

Рекомендуется сочетание вертикального и горизонтального масштабирования:
увеличение ресурсов CPU на 100-200% и внедрение кластерной архитектуры с 
несколькими экземплярами backend. 